package pp.mdga.game;

import java.util.Iterator;
import java.util.random.RandomGenerator;
import java.util.random.RandomGeneratorFactory;
import java.util.stream.IntStream;

/**
 * This class represents a simple die with the possibilities to shuffle and return the roll result.
 * An important fact, the sum of ZERO_EYE, NORMAL_EYE and DOUBLE_EYE have to be 1.0;
 */
public class Die {
    /**
     * The maximum number of eyes on the die.
     */
    public static final int MAXIMUM_EYES = 6;

    /**
     * The probability of rolling a zero eye.
     */
    public static final double ZERO_EYE = 0.2;

    /**
     * The probability of rolling a normal eye.
     */
    public static final double NORMAL_EYE = 0.2;

    /**
     * The probability of rolling a double eye.
     */
    public static final double DOUBLE_EYE = 0.6;

    /**
     * The modifier applied to the die roll.
     */
    private int dieModifier = 1;

    /**
     * The random number generator used for die rolls.
     */
    private final RandomGenerator random;

    /**
     * The result of the last die roll.
     */
    private int lastNumberOfDice;

    /**
     * Predefined rolls for testing.
     */
    private Iterator<Integer> rolls;

    /**
     * If the results of the die should be locked.
     */
    private final boolean lock;

    /**
     * This constructor is used to create a new Die object with a random seed.
     */
    public Die() {
        this.random = RandomGeneratorFactory.of("Random").create();
        this.lock = false;
    }

    /**
     * This constructor is used to create a new Die object with a given seed.
     *
     * @param seed the seed for the random number generator
     */
    public Die(long seed) {
        this.random = RandomGeneratorFactory.of("Random").create(seed);
        this.lock = false;
    }

    /**
     * Constructor.
     *
     * @param roll as the roll which should be returned everytime the shuffle method will be called as an Integer.
     */
    public Die(int roll) {
        this.random = RandomGeneratorFactory.of("Random").create();
        this.lastNumberOfDice = roll;
        this.lock = true;
    }

    /**
     * Constructor.
     *
     * @param rolls as a variable list of rolls which will be used by test cases as an Array of Integers.
     */
    public Die(int... rolls) {
        this.random = RandomGeneratorFactory.of("Random").create();
        this.rolls = IntStream.of(rolls).iterator();
        this.lock = false;
    }

    /**
     * This method will be used to return a random number generated by the random attribute of Die class.
     *
     * @return lastNumberOfDice as an Integer.
     */
    public int shuffle() {
        if (this.lock) {
            return this.lastNumberOfDice;
        }

        if (this.rolls != null && this.rolls.hasNext()) {
            this.lastNumberOfDice = this.rolls.next();
            return this.lastNumberOfDice;
        }

        this.lastNumberOfDice = this.random.nextInt(MAXIMUM_EYES) + 1;

        return this.lastNumberOfDice;
    }

    /**
     * This method will be used to return the given roll parameter.
     * It will be used for test cases.
     *
     * @param roll as the roll result which will be returned as an Integer.
     * @return lastNumberOfDice as an Integer.
     */
    public int shuffle(int roll) {
        this.lastNumberOfDice = roll;

        return this.lastNumberOfDice;
    }

    /**
     * This method will be used to modify the value of dieModifier attribute of Die class.
     */
    public void modify() {
        float randomFloat = this.random.nextFloat();
        if (randomFloat < ZERO_EYE) {
            this.dieModifier = 0;
        } else if (ZERO_EYE <= randomFloat && randomFloat < ZERO_EYE + NORMAL_EYE) {
            this.dieModifier = 1;
        } else if (ZERO_EYE + NORMAL_EYE <= randomFloat && randomFloat < ZERO_EYE + NORMAL_EYE + DOUBLE_EYE) {
            this.dieModifier = 2;
        }
    }

    /**
     * This method will be used to reset all values of the Die class to its origins.
     */
    public void reset() {
        this.dieModifier = 1;
    }

    /**
     * This method will be used to return dieModifier attribute of Die class.
     *
     * @return dieModifier as an Integer.
     */
    public int getDieModifier() {
        return this.dieModifier;
    }

    /**
     * This method will be used return lastNumberOfDice attribute of Die class.
     *
     * @return lastNumberOfDice as an Integer.
     */
    public int getLastNumberOfDice() {
        return this.lastNumberOfDice;
    }

    /**
     * This method will be used to set dieModifier attribute of Die class to the given dieModifier parameter.
     *
     * @param dieModifier as the new value of dieModifier as an Integer.
     */
    public void setDieModifier(int dieModifier) {
        this.dieModifier = dieModifier;
    }
}
